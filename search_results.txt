
Result 1 (from page-0058.png):
--- page-0058.png ---
Chapter 2: Getting Started
The PrimeTime Static Timing Analysis Flow
Table 3 Typical PrimeTime Static Timing Analysis Flow (Continued)
: sas
signal integrity analysis read_parasitics Analysis
-keep_capacitive coupling
11 Apply options for specific design |set_latch_loop_breaker Advanced Analysis
techniques set_multi_input_ Techniques,
switching coefficient Advanced Latch
define scaling lib group Analysis,
i Multi-Input Switching
Analysis,
Scaling for Multirail
Level Shifter Cells,
Fast Multidrive Delay
Analysis,
Parallel Driver
Reduction
12 Check the design data and check_timing Checking the
analysis setup check constraints Constraints
report_design
report_port
report_net
report_clock
report_wire load
report_path_group
report_cell
report_hierarchy
report_reference
report_lib
13 Perform a full timing analysis and | report_global_timing Reporting and
examine the results [report timing] Debugging Analysis
report_constraint Results,
report bottleneck Graphical User
report_analysis_coverage
report_delay calculation
update_timing
14 Generate engineering change set_eco_options ECO Flow
orders (ECOs) to fix timing fix eco dre
violations or recover power So ae eS
fix_eco_timing
fix_eco_power
write_changes
PrimeTime® User Guide 58
V-2023.12

Result 2 (from page-0139.png):
--- page-0139.png ---
. . Feedback
Chapter 4: Managing Performance and Capacity
HyperGrid Distributed Analysis
The Manager Process and the Worker Processes
HyperGrid distributed analysis uses a single manager process that invokes and controls
multiple worker processes.
The manager process is the process invoked by the user. It does the following:
+ Determines how to partition the design
+ Invokes the worker processes (one for each partition)
+ Generates full-design reports by querying the workers for information and merging it
together
The worker processes are invoked by the manager process. A worker process does the
following:
+ Reads the design data for a specific partition
+ Performs timing and noise updates
+ Gathers and returns results for queries sent by the manager process
Figure 20 shows how a full-flat analysis script is run in a HyperGrid distributed analysis.
Figure 20 Analysis Script Execution in a HyperGrid Distributed Analysis
Read and \ 7 \ 7
Worker 1 link design Build partitions
(netlist only) Read partition design data Gather Gather
Workers Full update_timing data data
Worker N of partition logic
Vv
run_top_flat.tcl: Read
set link path netlist
read_verilog (1) Create
Link design partitions
secu peace (2) Merged
load_upé reporting
update_timing commands
check timing (3)
[report timing]
HyperGrid distributed analysis always uses core-based licensing. See Distributed Core-
Based Licensing for details.
PrimeTime® User Guide 139
V-2023.12

Result 3 (from page-0144.png):
--- page-0144.png ---
Chapter 4: Managing Performance and Capacity
HyperGrid Distributed Analysis
To restore a saved distributed session,
1. (Optional) Set the location of the distributed analysis working directory:
pt_shell> set_app_var distributed_working directory ./MY_WORK_DIR
2. Use the restore_session command in the usual way:
pt_shell> restore_session my _distributed_session
Commands With HyperGrid Distributed Analysis Support
The following tool commands support HyperGrid distributed analysis:
characterize context
check_noise
check_timing
get_attribute
get_clock_relationship
get_noise_violation_sources
get_timing_paths
read_context
read_sdf
report_analysis_coverage
report_annotated_parasitics
report_attribute
report_clock_gating_check
report_constraint
report_crpr
report_delay calculation
report_exceptions
report _global_slack
report _global_timing
report_min_period
report_min_pulse_width
report_net
report_noise
report_noise_calculation
report_noise_violation_sources
report_ocvm
report_qor
report_si_bottleneck
[report timing]
restore_session
save_session
write context
write rh file
write sdf
PrimeTime® User Guide 144
V-2023.12

Result 4 (from page-0302.png):
--- page-0302.png ---
. Feedback
Chapter 8: Timing Paths and Exceptions
Timing Exceptions
4. -from clock, -rise_from clock, -fall_from clock
5. -to clock, -rise_to clock, -fall_to clock
Use the preceding list to determine which of two conflicting timing exception commands
has priority (for example, two set_max_delay commands). Starting from the top of the list:
1. Acommand containing -from pin, -rise_from pin, Of -fall_from pin has priority
over a command that does not contain -from pin, -rise_from pin, Or -fall_from
pin.
2. Acommand containing -to pin, -rise_to pin, Or-fall_to pinhas priority overa
command that does not contain -to pin, -rise_to pin, Or-fall_to pin.
... and so on down the list until the priority is resolved.
Here are some possible path specification combinations, listed in order of priority from
highest to lowest, according to the preceding priority rules:
1.-from pin -to pin
2. -from pin -to clock
3. -from pin
4. -from clock -to pin
5. -to pin
6. -from clock -to clock
7. -from clock
8. -to clock
Reporting Exceptions
To [report timing] exceptions that have been set, use the report_exceptions command.
You can reduce the scope of the report by using the path specification arguments -from,
-to,-through, -rise_from ,-fall_to, and soon, to match the path specifiers used
when the original exceptions were created.
The report_exceptions command causes a complete timing update, so be sure to use it
only after you have set up all timing assertions and you are ready to receive the report.
Exception-setting commands are sometimes partially or fully ignored for a number of
reasons. For example, a command that specifies a broad range of paths can be partially
overridden by another exception-setting command that specifies a subset of those paths.
For a partially ignored command, the exception report shows the reason that some part of
the command is being ignored.
PrimeTime® User Guide 302
V-2023.12

Result 5 (from page-0462.png):
--- page-0462.png ---
a Feedback
Chapter 13: Variation
Advanced On-Chip Variation
Guard-Banding in AOCV
Guard-band timing derate allows you to model nonprocess-related effects in an
AOCV flow. The -aocvm_guardband option is available in the set_timing_derate,
report_timing_derate, and reset_timing_derate commands.
Use the set_timing_derate command to specify a guard-band derating factor. The
-aocvm_guardband option is applicable only in an AOCV context. The derating factor
that is applied to an arc is a product of the guard-band derate and the AOCV derate. The
guard-band derate has no effect outside the context of AOCV.
To [report timing] derating factors on the current design, use the report_timing_derate
command. To report only guard-band derating factors, specify the -aocvm_guardband
option of the report_timing_derate command. If you do not specify either the
-variation Or -aocvm_guardband option, only the deterministic derating factors are
reported. These two options are mutually exclusive.
To reset guard-band derating factors, use the -aocvm_guardband option of the
reset_timing_derate command.
Incremental Timing Derating
Incremental timing derating enables you to fine-tune the timing derating factors on
objects such as cells or nets. To specify that the derating factor is an incremental
timing derating, use the set_timing_derate command with the -increment option.
You cannot incrementally apply guard-band timing derating, so the -increment and
-aocvm_guardband options of the set_timing_derate command are mutually exclusive.
Incremental timing derating follows to the same precedence and override rules as regular
timing derating. For more information about the precedence rules, see File Format for
AOCV.
By default, a specified incremental derating factor replaces any previous incremental
derating factor set for an object, such as a cell or net.
To accumulate rather than overwrite successive incremental derating settings, set the
timing_enable_cumulative_incremental_derate variable to true.
If no timing derating factor exists, the value of 0.0 is used for incremental derating, and 1.0
is used for regular derating. The incremental timing derating factor is added to the regular
timing derating factor. If the final resulting derating factor is less than 0.0, the negative
derating factor is converted to 0.0 to avoid negative delays.
PrimeTime® User Guide 462
V-2023.12

Result 6 (from page-0883.png):
--- page-0883.png ---
. . . Feedback
Chapter 19: Reporting and Debugging Analysis Results
Analysis Coverage Report
command sets the variable to true and incurs the runtime of another timing
update.
You can choose any combination from maximum or minimum and rise or fall to report a
particular slack value. The -max and -min options are mutually exclusive as are the -rise
and -fa11 options. Use the object_list option to list pins or ports. If no object list is
provided, then the default is all pins.
To get a list of path endpoints that have setup timing violations, use this command:
pt_shell> get_attribute [current_design] violating_endpoints_max
{"TOP/I_BLENDER/op2_reg[31]/D", ... }
The path endpoints are listed in order of increasing slack.
Similarly, to get a list of path endpoints that have hold timing violations, use this command:
pt_shell> get_attribute [current_design] violating_endpoints_min
{"sd_DQ[O]", ... }
Analysis Coverage Report
You can [report timing] checks in the current design or current instance by using the
report_analysis_ coverage command. Generating information about timing checks is
most critical for new designs.
Perform these checks right after you resolve errors found while using the check_timing
command. Perform additional checks whenever significant changes are made to the
design or the timing assertions. Analysis coverage checks are critical for sign-off. Follow
this basic flow:
1. Run link design and resolve link errors.
2. Run check_timing and resolve timing check errors.
3. Run report_analysis_coverage and resolve untested issues.
4. Perform the rest of the analysis.
The report_analysis_coverage command summarizes these checks:
+ Setup
+ Hold
+ No-change
+ Minimum period
+ Recovery
PrimeTime® User Guide 883
V-2023.12

Result 7 (from page-0950.png):
--- page-0950.png ---
Feedback
Chapter 20: Graphical User Interface
Analyzing Clock Domains and Clock-to-Clock Relationships.
You can expand or collapse multiple clocks simultaneously.
+ To expand one or more selected clocks and display the fanout levels in the clock trees,
right-click and choose Expand all Selected Clocks.
+ To collapse one or more selected clocks and hide the fanout levels beneath them, right-
click and choose Collapse all Selected Clocks.
As you expand or collapse the clock trees, the clock matrix displays or hides the
corresponding clock rows and columns.
When you select a matrix cell, the current clock information appears in the Legend,
Launch Clock, and Capture Clock boxes at the top of the clock analyzer window. For
explicit paths, the Legend box shows the letter and description that corresponds to the
selected cell.
Each matrix cell indicates the clock domain or specific clock-to-clock relationships. The
path constraints and synchronous or asynchronous relationship are identified using
letters and color associations. When a clock domain is collapsed, a summary of the path
constraints appears in the matrix cell, which means that a collapsed cell can have several
letters associated with it. The collapsed clock domain is indicated with a light brown cell to
differentiate it from other cells. For more details, see Clock Matrix Symbols and Colors.
If you want to examine the timing paths for a specific launch-capture clock pair, you can
load the paths into the path analyzer. Select the matrix cell where the clocks intersect, and
then right-click and choose “Analyze failing paths from clock_name to clock_name.”
You can also generate reports for a launch-capture clock pair.
+ To generate an exceptions report, select the matrix cell where the clocks intersect and
then right-click and choose “Report exceptions from clock_name to clock_name.”
+ To generate a timing report, select the matrix cell where the clocks intersect and then
right-click and choose “[report timing] from clock_name to clock_name.”
+ To generate a clock timing report, select the matrix cell where the clocks intersect and
then right-click and choose “Report clock skew from clock_name to clock_name.”
The GUI displays the reports in the console log view and in pt_shell.
You can save the clock data in the clock tree view or the clock launch-capture clock data in
the clock matrix view by exporting it to a CSV format file.
For more information about working with the clock analyzer, see
* Querying Launch-Capture Clock Pairs
* Selecting Clocks or Clock Domains
+ Sorting the Clock Tree View
PrimeTime® User Guide 950
V-2023.12

Result 8 (from page-1073.png):
--- page-1073.png ---
Feedback
Chapter 21: ECO Flow
Incremental ECO Flow Using Synopsys Tools
Incremental ECO Iteration
After the flow has been initialized, you can perform the incremental ECO iterations:
1. In the IC Compiler II tool, implement the ECO changes written out by the PrimeTime
tool and track the incremental changes:
icc2_shell> open_lib Design.nlib
icc2_shell> copy block -from_block Block _pre_eco -to_block Block_ecol
icc2_shell> open_block Block_ecol
icc2_shell> record_signoff_eco_changes -start -input pt-eco_incl.tcl
... Perform ECO implementation using minimal physical impact flow ...
icc2_shell> record_signoff_eco_changes -stop -def
The record_signoff_eco_changes command saves the design, writes the Verilog
netlist, and writes the DEF design information. In step 3, the PrimeTime tool uses this
information in the incremental ECO flow.
2. In the StarRC tool, perform incremental parasitic extraction of the modified design by
using commands similar to the following in the StarRC command file:
NDM_DATABASE: Design.nlib
BLOCK: Block_ecol
ECO_MODE: YES
GPD: Block_pre_eco.gpd
3. In the PrimeTime tool, read in the incremental netlist changes and incremental
parasitics for the modified design and check to see if it now meets all timing
constraints.
pt_shell> restore_session eco_session1l
pt_shell> read_eco_changes ndm_path/design.incr.pt
pt_shell> read_parasitics -eco Block_ecol_inc.gpd
pt_shell> update_timing # incremental update performed by default
pt_shell> save_session eco_session2
pt_shell> [report timing] ...
... Assess timing to determine whether another ECO is needed ...
... If so, perform the next ECO iteration, then go back to step1...
pt_shell> fix_eco_timing ...
pt_shell> fix_eco_dre ...
pt_shell> write_changes pt-eco_inc2.tcl
Repeat steps 1 through 3 using ECO data from the previous iteration, until you achieve
timing closure. For final chip signoff, perform a final full-chip extraction and timing analysis.
PrimeTime® User Guide 1073
V-2023.12

Result 9 (from page-1129.png):
--- page-1129.png ---
. - A Feedback
Chapter 22: Hierarchical Analysis
HyperScale Analysis
physically-unique HyperScale blocks. If an analysis contains HyperScale subblocks, you
do not read the detailed parasitics for those blocks; the detailed parasitics are already a
part of the HyperScale block session data, and they are automatically loaded after the
design is linked. Instead, read in the top-level parasitics file that contains the detailed
parasitic information up to the HyperScale block boundaries. PrimeTime stitches the top-
level parasitics and HyperScale block parasitics together.
Behavior of link_design With HyperScale Configuration
With the HyperScale configuration setup, the design link step in top-level analysis expects
to read the HyperScale block session data from the paths defined set_hier config
-block -path. The flow does not require reading Verilog netlist and parasitic files for the
corresponding block to link the child design in the top-level design. For example, here is
the setup for bIkA:
set_hier config -block blkA -path /diskl/b1kA/HS_DATA \
-name fast_func
The link _design command looks for the block-level session data under the path /disk1/
bIkA/HS_DATA/fast_func_all_inst and uses the session for reading block data for linking. If
it does not find the data under the location, the tool issues a link error.
If you specify the -instances option in the block configuration, the tool looks for the
specific instance of the same block:
set_hier config -block blkA -instances Ul \
-path /diskl/blkA/HS_DATA -name fast_func
The 1ink_design command looks for the block data under the specified path with the
assigned configuration name and instance name appended:
/disk1/b1kA/HS_DATA/fast_func_U1
Block-Level Analysis
To perform block-level HyperScale analysis, use a script similar to the following:
set link_path {* slow.db}
# Enable HyperScale analysis
set hier enable analysis true
# Read and link design; read constraints
read_verilog BLK.v
current_design BLK
link_design
source $SDC/BLK.sdc
# Infer HyperScale configuration and load top-level context data
read_context topDir
# Update and [report timing] and noise
PrimeTime® User Guide 1129
V-2023.12

Result 10 (from page-1131.png):
--- page-1131.png ---
. . . Feedback
Chapter 22: Hierarchical Analysis
HyperScale Analysis
safe when it comes to the design intent, the HyperScale flow requires user action rather
than making such significant changes to the block-level constraints.
The context adjustment process is not limited to boundary violations. Whenever possible,
the HyperScale flow uses the actual block context information in place of the budgeted
constraints for all ports of the block. The goal is to provide a block-level analysis that
provides the runtime and capacity advantages of a block-level analysis, yet accurately
reproduces the block timing as it exists within the top-level design.
Top-Level Analysis
When you perform HyperScale top-level analysis, the analysis works a little bit differently
from a standard analysis. The netlists for any HyperScale blocks are automatically
obtained from their respective HyperScale session data directories to satisfy the link
requirements for those blocks. In addition, the detailed parasitics for the HyperScale
blocks are automatically applied. Because the block-level design teams are actively
running their own HyperScale block-level analyses, the top-level run automatically uses
the latest block session data available from those teams.
To perform top-level HyperScale analysis, use a script similar to the following:
set link_path {* slow.db}
# Enable HyperScale analysis
set_app_var hier_enable analysis true
# Specify HyperScale configuration information for all subblocks
set_hier_config -block BLK -path $STA_DIR/BLK/HS_BLK
# Read and link the design
read_verilog TOP.v # BLK.v is optional if HyperScale block data exists
current_design TOP
link_design
# Optionally allow design mismatches
# set_app_var link_allow_design_mismatch true
#
# Check hierarchy configuration, settings, and session attributes
report_hier_analysis
# Read the constraints
source $SDC/Flat.sde
# Update and [report timing]
update_timing
report_timing -max_paths 100 -slack_lesser_than 0
update_noise
report_noise
# Check the clock mapping
PrimeTime® User Guide 1131
V-2023.12
